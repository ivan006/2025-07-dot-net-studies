WEBVTT

00:01.170 --> 00:07.560
So with that, we have covered all of the files that we see in the project except three main folders,

00:07.560 --> 00:10.710
which is controllers, models and views.

00:10.830 --> 00:17.790
And as you would have guessed, this is what MVC stands for, which is model view and controller.

00:18.400 --> 00:23.530
That being said, let's understand the architecture of an MVC application.

00:23.770 --> 00:26.710
The first thing in MVC is the model.

00:26.980 --> 00:30.070
Model represents the shape of the data.

00:30.460 --> 00:34.360
A class in C sharp is used to describe a model.

00:34.540 --> 00:40.990
The model component corresponds to all the data related logic that user works with.

00:41.290 --> 00:48.700
This can represent either the data that is being transferred between view and controller or any business

00:48.700 --> 00:55.100
logic related data model would also represent all the tables of the database.

00:55.150 --> 01:01.450
So if you have ten tables in the database, you will have at least ten models on top of that.

01:01.450 --> 01:07.990
There is also more complexity, but we will go into those details later on in the course.

01:08.410 --> 01:15.280
So if a class is a model, then all the properties in that class will be all the columns of a table.

01:15.860 --> 01:20.480
So that is the simple relation that you can think about model right now.

01:21.440 --> 01:23.150
Then we have the view.

01:23.720 --> 01:28.250
View in an MVC is a user interface view.

01:28.280 --> 01:34.880
Basically means whatever you see when you click a web page, the UI that you see that will be represented

01:34.880 --> 01:35.840
by The View.

01:36.800 --> 01:45.020
View in ASP.Net MVC is HTML, CSS and some special syntax, which is razor syntax.

01:45.530 --> 01:52.250
So main thing about view is that it represents the user interface logic of your application.

01:52.640 --> 01:55.040
Finally, we have the controller.

01:55.280 --> 01:58.490
The controller handles the user request.

01:58.730 --> 02:06.230
Typically whenever a request comes in like user clicks anything, it will raise an Http request which

02:06.230 --> 02:08.450
will be handled by the controller.

02:08.870 --> 02:16.310
The controller then uses the model as well as view to process the request and then it returns back an

02:16.310 --> 02:17.990
appropriate response.

02:18.690 --> 02:25.590
So controller acts as an interface between model and view to process all the business logic.

02:25.620 --> 02:33.990
Incoming requests and it manipulates the data using model and interact with the view to render the final

02:33.990 --> 02:34.830
output.

02:35.430 --> 02:40.890
This is just a brief overview of how model, view and controller interacts.

02:41.400 --> 02:48.480
So just to summarize, what happens is first a user clicks something on the website, so a request comes

02:48.480 --> 02:49.620
to controller.

02:49.860 --> 02:57.660
Controller will always be the main entry point in an MVC application and in controller it will hit any

02:57.660 --> 03:02.130
of the action methods that we have defined inside the controller.

03:03.030 --> 03:10.200
Now Controller Will uses the model and it will fetch all the data that it needs to display in a view.

03:10.680 --> 03:17.430
Then it passes that data to the view so that view can render the final page that user can see.

03:18.060 --> 03:25.050
Then view will send the request back to the controller and then based on whatever is rendered, a response

03:25.050 --> 03:29.040
will be sent back and user will be able to see the page.

03:29.640 --> 03:34.230
So you can see controller can be treated as part of your application.

03:34.830 --> 03:41.370
With that in place in the next video, let's run our application for the first time and see how model,

03:41.370 --> 03:45.180
view and controller interacts and how routing works.
