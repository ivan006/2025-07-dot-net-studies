WEBVTT

00:01.410 --> 00:05.370
In the last video, we took a look at configure services.

00:05.790 --> 00:09.480
Next method that we have here is the configure method.

00:10.050 --> 00:15.650
Here we see the AI application builder as well as the AI web host environment.

00:16.090 --> 00:21.840
Environment We are using only to check if it's development or if it's something else.

00:22.170 --> 00:29.280
Based on that, we are configuring the pipeline, but the AI application builder configures the Http

00:29.280 --> 00:32.490
request pipeline of ASP.Net Core.

00:33.060 --> 00:39.480
The pipeline specifies how the application should respond to each Http request.

00:39.870 --> 00:42.670
Let's take a look at this with an example.

00:42.690 --> 00:48.150
So in order to understand what the pipeline is, let me switch to the presentation here.

00:48.930 --> 00:53.160
We have different browsers here and then we have a pipeline.

00:53.580 --> 00:59.820
The pipeline specifies how the application should respond to each Http request.

01:00.390 --> 01:06.720
When your application receives a request from the browser, the request goes back and forth through

01:06.720 --> 01:07.650
the pipeline.

01:08.400 --> 01:09.510
In the pipeline.

01:09.510 --> 01:11.910
You can add items that you want.

01:12.450 --> 01:18.120
Pipeline is made up of Middlewares and MVC is a middleware itself.

01:18.720 --> 01:25.260
So if we want an application to be built using MVC, we need to add that middleware.

01:25.680 --> 01:31.830
Other examples could be authentication, middleware authorization, middleware, session middleware,

01:31.830 --> 01:34.620
static files, middleware and much more.

01:35.010 --> 01:42.120
So what exactly happens is when your request will go through each middleware, it can get modified by

01:42.120 --> 01:46.590
them and eventually it is either passed to the next middleware.

01:46.590 --> 01:52.650
And if that is the last middleware in the pipeline, the response is returned back to the server.

01:53.040 --> 01:58.050
Let's take a look at the few middlewares that are already added in our application.

01:58.050 --> 02:03.390
So if we switch back to the code inside the configure method first, we are checking.

02:03.390 --> 02:10.330
If the environment is development, then we are adding a middleware for developer exception page.

02:10.750 --> 02:17.710
Else we have the exception handler which displays a custom error message because we do not want to show

02:17.710 --> 02:20.200
them the developer or the coding error.

02:20.380 --> 02:24.580
Then the next middleware is use https redirection.

02:24.880 --> 02:30.940
This forces the user to use a secure line and then we are adding static files.

02:31.240 --> 02:38.620
What I mean by static files is that any web project needs styling, JavaScript images and much more.

02:38.710 --> 02:45.610
So all of the static content will be served by our application only because we added the middleware

02:45.610 --> 02:47.620
to use the static files.

02:48.470 --> 02:53.720
Then we are adding the routing middleware followed by authorization middleware.

02:54.370 --> 02:59.380
You can see authorization is added before the end points right here.

02:59.500 --> 03:03.740
And that is because order matters when it comes to the middleware.

03:03.760 --> 03:09.730
When a request comes in, it is passed from the first middleware to the second to the third, and so

03:09.730 --> 03:10.300
on.

03:11.500 --> 03:16.180
In End Point, we configure the default route for our application.

03:17.080 --> 03:23.470
That being said, before we understand the end points in more detail, let me explain you routing in

03:23.470 --> 03:24.640
the next video.
